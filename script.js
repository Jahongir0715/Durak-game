// ===== –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ =====
const playerHandDiv = document.getElementById('player-hand');
const botHandDiv = document.getElementById('bot-hand');
const trumpSuitDiv = document.getElementById('trump-suit');
const gameLogDiv = document.getElementById('game-log');
const startBtn = document.getElementById('start-game-btn');
const battlefieldDiv = document.getElementById('battlefield');

// ===== –ò–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ =====
const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
const ranks = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];

let deck = [];
let playerHand = [];
let botHand = [];
let trumpCard = null;
let trumpSuit = '';

let attackingCards = [];  // –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ, –∞—Ç–∞–∫–∞
let defendingCards = [];  // –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ, –∑–∞—â–∏—Ç–∞

let playerTurn = true;  // –∫—Ç–æ —Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å?

// ===== –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ç–∞—Å–æ–≤–∫–∞ –∫–æ–ª–æ–¥—ã =====
function createDeck() {
  return suits.flatMap(suit => ranks.map(rank => ({ suit, rank })));
}

function shuffle(array) {
  for (let i = array.length -1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i+1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

// ===== –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä—É–∫–∏ =====
function renderHand(hand, container, hide=false, clickHandler=null) {
  container.innerHTML = '';
  hand.forEach((card, index) => {
    const el = document.createElement('div');
    el.className = 'card';
    el.textContent = hide ? 'üÇ†' : card.rank + card.suit;
    if ((clickHandler) && !hide) {
      el.style.cursor = 'pointer';
      el.onclick = () => clickHandler(index);
    }
    if (card.suit === '‚ô•' || card.suit === '‚ô¶') {
      el.classList.add('red');
    }
    container.appendChild(el);
  });
}

// ===== –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ =====
function renderBattlefield() {
  battlefieldDiv.innerHTML = '';
  for(let i=0; i < attackingCards.length; i++) {
    const atkCard = document.createElement('div');
    atkCard.className = 'battle-card';
    atkCard.textContent = attackingCards[i].rank + attackingCards[i].suit;
    if (attackingCards[i].suit === '‚ô•' || attackingCards[i].suit === '‚ô¶') {
      atkCard.classList.add('red');
    }
    battlefieldDiv.appendChild(atkCard);

    if(defendingCards[i]) {
      const defCard = document.createElement('div');
      defCard.className = 'battle-card';
      defCard.textContent = defendingCards[i].rank + defendingCards[i].suit;
      if (defendingCards[i].suit === '‚ô•' || defendingCards[i].suit === '‚ô¶') {
        defCard.classList.add('red');
      }
      defCard.style.position = 'absolute';
      defCard.style.top = '50px';
      defCard.style.left = `${i*60}px`;
      battlefieldDiv.appendChild(defCard);
    }
  }
}

// ===== –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã =====
function startGame() {
  deck = createDeck();
  shuffle(deck);

  playerHand = deck.splice(0,6);
  botHand = deck.splice(0,6);
  trumpCard = deck[deck.length -1];
  trumpSuit = trumpCard.suit;

  trumpSuitDiv.textContent = `–ö–æ–∑—ã—Ä—å: ${trumpCard.rank}${trumpCard.suit}`;
  attackingCards = [];
  defendingCards = [];

  playerTurn = true;

  renderHand(playerHand, playerHandDiv, false, onPlayerAttack);
  renderHand(botHand, botHandDiv, true);
  renderBattlefield();
  gameLogDiv.textContent = '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à —Ö–æ–¥.';
  enablePlayerHand();
}

// ===== –ü—Ä–∞–≤–∏–ª–∞ –±–∏—Ç–≤—ã –∫–∞—Ä—Ç =====
function canBeat(attackingCard, defendingCard) {
  // –±—å–µ—Ç –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ —Ç–∞ –∂–µ –º–∞—Å—Ç—å –∏ —Å—Ç–∞—Ä—à–µ, –∏–ª–∏ –∫–æ–∑—ã—Ä—å –±—å–µ—Ç –Ω–µ –∫–æ–∑—ã—Ä—å
  if(defendingCard.suit === attackingCard.suit) {
    return ranks.indexOf(defendingCard.rank) > ranks.indexOf(attackingCard.rank);
  }
  if(defendingCard.suit === trumpSuit && attackingCard.suit !== trumpSuit) {
    return true;
  }
  return false;
}

// ===== –•–æ–¥ –∏–≥—Ä–æ–∫–∞ (–∞—Ç–∞–∫–∞) =====
function onPlayerAttack(cardIndex) {
  if (!playerTurn) {
    gameLogDiv.textContent = "–°–µ–π—á–∞—Å —Ö–æ–¥ –±–æ—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.";
    return;
  }

  const card = playerHand[cardIndex];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∞—Ç–∞–∫–æ–≤–∞—Ç—å (–ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –∏–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Ä–∞–Ω–≥ –Ω–∞ —Å—Ç–æ–ª–µ)
  if(attackingCards.length > 0
