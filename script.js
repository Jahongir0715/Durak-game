// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç ---

const SUITS = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£']; // –ü–∏–∫–∏, —á–µ—Ä–≤—ã, –±—É–±–Ω—ã, —Ç—Ä–µ—Ñ—ã
const RANKS = ['6', '7', '8', '9', '10', '–í', '–î', '–ö', '–¢']; // 6 - –¢—É–∑

// –°—Ç–∞—Ä—à–∏–Ω—Å—Ç–≤–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç (–∏–Ω–¥–µ–∫—Å—ã –∏–∑ RANKS)
const rankValue = rank => RANKS.indexOf(rank);

// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---

let deck = [];
let trumpSuit = null;
let playerHand = [];
let botHand = [];
let battlefield = []; // –∫–∞—Ä—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º —Ö–æ–¥–µ (–∞—Ç–∞–∫–∞ –∏ –∑–∞—â–∏—Ç–∞)

// --- –≠–ª–µ–º–µ–Ω—Ç—ã DOM ---

const deckElem = document.getElementById('deck');
const trumpElem = document.getElementById('trump');
const playerHandElem = document.getElementById('player-hand');
const botHandElem = document.getElementById('bot-hand');
const battlefieldElem = document.getElementById('battlefield');
const startBtn = document.getElementById('start-game-btn');
const gameLog = document.getElementById('game-log');

// --- –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É 36 –∫–∞—Ä—Ç ---

function createDeck() {
  const cards = [];
  for (const suit of SUITS) {
    for (const rank of RANKS) {
      cards.push({suit, rank});
    }
  }
  return cards;
}

// --- –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã (Fisher-Yates) ---

function shuffle(deck) {
  for (let i = deck.length -1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i +1));
    [deck[i], deck[j]] = [deck[j], deck[i]];
  }
}

// --- –í—ã–±–∏—Ä–∞–µ–º –∫–æ–∑—ã—Ä—å (–ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ –≤ –∫–æ–ª–æ–¥–µ) ---

function chooseTrump(deck) {
  const trumpCard = deck[deck.length -1];
  return trumpCard.suit;
}

// --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç –≤ —ç–ª–µ–º–µ–Ω—Ç–µ (—Ä—É–∫–∞ –∏–≥—Ä–æ–∫–∞/–±–æ—Ç–∞) ---

function renderHand(container, hand, hideCards = false) {
  container.innerHTML = '';
  hand.forEach(card => {
    const cardDiv = document.createElement('div');
    cardDiv.classList.add('card');
    if (card.suit === '‚ô•' || card.suit === '‚ô¶') cardDiv.classList.add('red');

    if (hideCards) {
      cardDiv.textContent = 'üÇ†';
    } else {
      cardDiv.innerHTML = `<div class="top-left">${card.rank}${card.suit}</div><div class="bottom-right">${card.rank}${card.suit}</div>`;
    }

    container.appendChild(cardDiv);
  });
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–æ–¥—ã –∏ –∫–æ–∑—ã—Ä—è ---

function renderDeck() {
  deckElem.textContent = deck.length > 0 ? `üÇ† (${deck.length})` : '–ü—É—Å—Ç–æ';
  trumpElem.textContent = trumpSuit ? trumpSuit : '';
}

// --- –†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç (–ø–æ 6 –∫–∞–∂–¥–æ–º—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥–µ) ---

function dealCards() {
  while (playerHand.length < 6 && deck.length > 0) {
    playerHand.push(deck.pop());
  }
  while (botHand.length < 6 && deck.length > 0) {
    botHand.push(deck.pop());
  }
}

// --- –õ–æ–≥ –∏–≥—Ä—ã ---

function addLog(text) {
  const p = document.createElement('p');
  p.textContent = text;
  gameLog.appendChild(p);
  gameLog.scrollTop = gameLog.scrollHeight;
}

// --- –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã ---

function startGame() {
  deck = createDeck();
  shuffle(deck);
  trumpSuit = chooseTrump(deck);

  playerHand = [];
  botHand = [];
  battlefield = [];

  dealCards();

  renderDeck();
  renderHands();
  renderBattlefield();

  addLog('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ö–æ–∑—ã—Ä—å: ' + trumpSuit);
  startBtn.disabled = true;
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—É–∫ –∏–≥—Ä–æ–∫–æ–≤ ---

function renderHands() {
  renderHand(playerHandElem, playerHand);
  renderHand(botHandElem, botHand, true); // –±–æ—Ç—Å–∫–∏–µ –∫–∞—Ä—Ç—ã —Å–∫—Ä—ã—Ç—ã
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–∞ ---

function renderBattlefield() {
  battlefieldElem.innerHTML = '';
  battlefield.forEach(pair => {
    // pair: {attack: card, defense: card|null}
    const pairDiv = document.createElement('div');
    pairDiv.style.display = 'flex';
    pairDiv.style.flexDirection = 'column';
    pairDiv.style.gap = '5px';

    const attackCard = createCardDiv(pair.attack);
    pairDiv.appendChild(attackCard);

    if (pair.defense) {
      const defenseCard = createCardDiv(pair.defense);
      pairDiv.appendChild(defenseCard);
    } else {
      const defensePlaceholder = document.createElement('div');
      defensePlaceholder.style.width = '60px';
      defensePlaceholder.style.height = '90px';
      pairDiv.appendChild(defensePlaceholder);
    }

    battlefieldElem.appendChild(pairDiv);
  });
}

// --- –°–æ–∑–¥–∞—Ç—å DOM —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—Ç—ã ---

function createCardDiv(card) {
  const cardDiv = document.createElement('div');
  cardDiv.classList.add('card');
  if (card.suit === '‚ô•' || card.suit === '‚ô¶') cardDiv.classList.add('red');
  cardDiv.innerHTML = `<div class="top-left">${card.rank}${card.suit}</div><div class="bottom-right">${card.rank}${card.suit}</div>`;
  return cardDiv;
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

startBtn.addEventListener('click', startGame);

// --- –ù–∞—á–∏–Ω–∞–µ–º ---

// –û—Ç—Ä–∏—Å—É–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
renderDeck();
renderHands();
renderBattlefield();
addLog('–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" —á—Ç–æ–±—ã —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å');

