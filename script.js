// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const startBtn = document.getElementById('start-game-btn');
const deckDiv = document.getElementById('deck');
const takeCardBtn = document.getElementById('take-card-btn');
const trumpSuitDiv = document.getElementById('trump-suit');
const playerHandDiv = document.getElementById('player-hand');
const botHandDiv = document.getElementById('bot-hand');
const battlefieldDiv = document.getElementById('battlefield');
const gameLogDiv = document.getElementById('game-log');

// –ö–∞—Ä—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let deck = [];
let trumpCard = null;
let trumpSuit = null;
let playerHand = [];
let botHand = [];
let attackingCard = null;
let defendingCard = null;

// –°—Ç–∞—Ä—à–∏–Ω—Å—Ç–≤–æ –∫–∞—Ä—Ç (–ø–æ –ø—Ä–∞–≤–∏–ª—É)
const ranksOrder = ['6', '7', '8', '9', '10', '–í', '–î', '–ö', '–¢'];

// –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–¥—É
function createDeck() {
  const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
  const ranks = ['6', '7', '8', '9', '10', '–í', '–î', '–ö', '–¢'];
  const d = [];
  for (const suit of suits) {
    for (const rank of ranks) {
      d.push({rank, suit});
    }
  }
  return d;
}

// –¢–∞—Å–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã (Fisher-Yates)
function shuffle(array) {
  for(let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i+1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º (—É –∫–æ–≥–æ –º–ª–∞–¥—à–∞—è –∫–æ–∑—ã—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞)
function findFirstPlayer() {
  let minTrumpIndex = Infinity;
  let firstPlayer = 'player'; // player –∏–ª–∏ bot
  playerHand.forEach(card => {
    if (card.suit === trumpSuit) {
      const idx = ranksOrder.indexOf(card.rank);
      if (idx < minTrumpIndex) {
        minTrumpIndex = idx;
        firstPlayer = 'player';
      }
    }
  });
  botHand.forEach(card => {
    if (card.suit === trumpSuit) {
      const idx = ranksOrder.indexOf(card.rank);
      if (idx < minTrumpIndex) {
        minTrumpIndex = idx;
        firstPlayer = 'bot';
      }
    }
  });
  return firstPlayer;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–∑—ã—Ä–Ω–æ–π –º–∞—Å—Ç–∏
function renderTrumpSuit() {
  if (!trumpCard) {
    trumpSuitDiv.textContent = '';
    return;
  }
  trumpSuitDiv.textContent = `–ö–æ–∑—ã—Ä—å: ${trumpCard.rank}${trumpCard.suit}`;
  trumpSuitDiv.style.fontSize = '24px';
  trumpSuitDiv.style.fontWeight = '700';
  if (trumpCard.suit === '‚ô•' || trumpCard.suit === '‚ô¶') {
    trumpSuitDiv.style.color = '#dc3545';
  } else {
    trumpSuitDiv.style.color = '#222';
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–æ–¥—ã
function renderDeck() {
  if (deck.length === 0) {
    deckDiv.textContent = '–ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞';
    takeCardBtn.disabled = true;
  } else {
    deckDiv.textContent = 'üÇ†';
    takeCardBtn.disabled = false;
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä—É–∫–∏
function renderHand(hand, container, hide = false, clickHandler = null) {
  container.innerHTML = '';
  hand.forEach((card, i) => {
    const el = document.createElement('div');
    el.className = 'card';
    el.textContent = hide ? 'üÇ†' : card.rank + card.suit;
    if (card.suit === '‚ô•' || card.suit === '‚ô¶') el.classList.add('red');
    if (clickHandler) {
      el.addEventListener('click', () => clickHandler(i));
    }
    container.appendChild(el);
  });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª (–∞—Ç–∞–∫–∞ –∏ –∑–∞—â–∏—Ç–∞)
function addBattlePair(attackCard, defenseCard = null) {
  const pairDiv = document.createElement('div');
  pairDiv.className = 'battle-pair';

  const attackEl = document.createElement('div');
  attackEl.className = 'battle-card attack-card';
  attackEl.textContent = attackCard.rank + attackCard.suit;
  if (attackCard.suit === '‚ô•' || attackCard.suit === '‚ô¶') attackEl.classList.add('red');
  pairDiv.appendChild(attackEl);

  if (defenseCard) {
    const defenseEl = document.createElement('div');
    defenseEl.className = 'battle-card defense-card';
    defenseEl.textContent = defenseCard.rank + defenseCard.suit;
    if (defenseCard.suit === '‚ô•' || defenseCard.suit === '‚ô¶') defenseEl.classList.add('red');
    pairDiv.appendChild(defenseEl);
  }

  battlefieldDiv.appendChild(pairDiv);
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–æ–ª–∞
function clearBattlefield() {
  battlefieldDiv.innerHTML = '';
}

// –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç –ø–æ —Å—Ç–∞—Ä—à–∏–Ω—Å—Ç–≤—É —Å —É—á—ë—Ç–æ–º –∫–æ–∑—ã—Ä—è
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ b –±—å—ë—Ç –∫–∞—Ä—Ç—É a
function beats(a, b) {
  // –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–π –º–∞—Å—Ç–∏, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–Ω–≥–∏
  if (a.suit === b.suit) {
    return ranksOrder.indexOf(b.rank) > ranksOrder.indexOf(a.rank);
  }
  // –ï—Å–ª–∏ b ‚Äî –∫–æ–∑—ã—Ä—å, –∞ a –Ω–µ—Ç ‚Äî –±—å–µ—Ç
  if (b.suit === trumpSuit && a.suit !== trumpSuit) {
    return true;
  }
  return false;
}

// –î–æ–±–æ—Ä –∫–∞—Ä—Ç –∏–∑ –∫–æ–ª–æ–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ (–Ω–∞—á–∏–Ω–∞—è —Å –∞—Ç–∞–∫—É—é—â–µ–≥–æ)
function refillHands(attacker) {
  const order = attacker === 'player' ? [playerHand, botHand] : [botHand, playerHand];
  order.forEach(hand => {
    while (hand.length < 6 && deck.length > 0) {
      hand.push(deck.pop());
    }
  });
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
let currentAttacker = null; // 'player' –∏–ª–∏ 'bot'
let isPlayerTurn = false;
let attackingPairs = []; // –ø–∞—Ä—ã {attack: card, defense: card|null}

// –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
function startGame() {
  deck = createDeck();
  shuffle(deck);
  playerHand = [];
  botHand = [];
  attackingPairs = [];
  clearBattlefield();
  gameLogDiv.textContent = '';
  trumpCard = deck[deck.length - 1];
  trumpSuit = trumpCard.suit;

  // –†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç
  for (let i = 0; i < 6; i++) {
    playerHand.push(deck.pop());
    botHand.push(deck.pop());
  }

  renderTrumpSuit();
  renderDeck();
  renderHand(playerHand, playerHandDiv, false, onPlayerCardClick);
  renderHand(botHand, botHandDiv, true);

  currentAttacker = findFirstPlayer();
  isPlayerTurn = (currentAttacker === 'player');

  gameLogDiv.textContent = isPlayerTurn ? '–í–∞—à —Ö–æ–¥! –í—ã –∞—Ç–∞–∫—É—é—â–∏–π.' : '–•–æ–¥ –±–æ—Ç–∞. –û–Ω –∞—Ç–∞–∫—É–µ—Ç.';

  if (!isPlayerTurn) {
    setTimeout(botAttack, 1200);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É (–¥–ª—è –∞—Ç–∞–∫–∏)
function onPlayerCardClick(index) {
  if (!isPlayerTurn) {
    gameLogDiv.textContent = '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.';
    return;
  }
  if (attackingPairs.length > 0) {
    gameLogDiv.textContent = '–í—ã —É–∂–µ —Ö–æ–¥–∏–ª–∏, –∂–¥–∏—Ç–µ –æ—Ç–±–æ—è.';
    return;
  }

  const card = playerHand[index];
  attackingPairs.push({attack: card, defense: null});
  playerHand.splice(index, 1);

  clearBattlefield();
  attackingPairs.forEach(pair => addBattlePair(pair.attack, pair.defense));

  renderHand(playerHand, playerHandDiv, false, onPlayerCardClick);
  renderHand(botHand, botHandDiv, true);

  gameLogDiv.textContent = `–í—ã –ø–æ—Ö–æ–¥–∏–ª–∏ –∫–∞—Ä—Ç–æ–π ${card.rank}${card.suit}. –ë–æ—Ç –æ—Ç–±–∏–≤–∞–µ—Ç...`;

  isPlayerTurn = false;

  setTimeout(botDefend, 1200);
}

// –ë–æ—Ç –æ—Ç–±–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç—É
function botDefend() {
  if (attackingPairs.length === 0) return;

  const attackCard = attackingPairs[0].attack;

  // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–æ–±–∏—Ç—å –∫–∞—Ä—Ç—É –∞—Ç–∞–∫–∏
  const defendIndex = botHand.findIndex(card => beats(attackCard, card));

  if (defendIndex === -1) {
    // –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–±–∏—Ç—å - –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã
    botHand = botHand.concat(attackingPairs.map(p => p.attack));
    botHand = botHand.concat(attackingPairs.filter(p => p.defense).map(p => p.defense));
    attackingPairs = [];
    clearBattlefield();
    renderHand(botHand, botHandDiv, true);
    gameLogDiv.textContent = '–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–±–∏—Ç—å—Å—è –∏ –≤–∑—è–ª –∫–∞—Ä—Ç—ã. –í–∞—à —Ö–æ–¥ —Å–Ω–æ–≤–∞.';
    isPlayerTurn = true;
    refillHands('player');
    renderDeck();
    renderHand(playerHand, playerHandDiv, false, onPlayerCardClick);
    return;
  }

  const defendCard = botHand.splice(defendIndex, 1)[0];
  attackingPairs[0].defense = defendCard;

  clearBattlefield();
  attackingPairs.forEach(pair => addBattlePair(pair.attack, pair.defense));

  renderHand(botHand, botHandDiv, true);

  gameLogDiv.textContent = `–ë–æ—Ç –æ—Ç–±–∏–ª –∫–∞—Ä—Ç—É ${attackCard.rank}${attackCard.suit} –∫–∞—Ä—Ç–æ–π ${defendCard.rank}${defendCard.suit}. –í–∞—à —Ö–æ–¥.`;

  isPlayerTurn = true;

  refillHands('bot');
  renderDeck();
  renderHand(playerHand, playerHandDiv, false, onPlayerCardClick);
}

// –•–æ–¥ –±–æ—Ç–∞ - –∞—Ç–∞–∫–∞
function botAttack() {
  if (botHand.length === 0) {
    gameLogDiv.textContent = '–ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª!';
    disablePlayerHand();
    return;
  }
  const attackCard = botHand.shift();
  attackingPairs.push({attack: attackCard, defense: null});
  clearBattlefield();
  attackingPairs.forEach(pair => addBattlePair(pair.attack, pair.defense));
  renderHand(botHand, botHandDiv, true);
  renderHand(playerHand, playerHandDiv, false, onPlayerCardClick);
  gameLogDiv.textContent = `–ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç –∫–∞—Ä—Ç–æ–π ${attackCard.rank}${attackCard.suit}. –û—Ç–±–µ–π—Ç–µ –µ—ë!`;
  isPlayerTurn = true;
}

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä—É–∫ –∏–≥—Ä–æ–∫–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–∫–æ–≤)
function disablePlayerHand() {
  playerHandDiv.querySelectorAll('.card').forEach(card => {
    card.classList.add('disabled');
    card.style.pointerEvents = 'none';
  });
}

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä—É–∫ –∏–≥—Ä–æ–∫–∞
function enablePlayerHand() {
  playerHandDiv.querySelectorAll('.card').forEach(card => {
    card.classList.remove('disabled');
    card.style.pointerEvents = 'auto';
  });
}

// –ö–Ω–æ–ø–∫–∞ –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
takeCardBtn.addEventListener('click', () => {
  if (deck.length === 0) {
    alert('–ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞!');
    return;
  }
  if (!isPlayerTurn) {
    gameLogDiv.textContent = '–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.';
    return;
  }
  if (playerHand.length >= 6) {
    gameLogDiv.textContent = '–£ –≤–∞—Å —É–∂–µ 6 –∫–∞—Ä—Ç!';
    return;
  }
  const card = deck.pop();
  playerHand.push(card);
  renderHand(playerHand, playerHandDiv, false, onPlayerCardClick);
  renderDeck();
  gameLogDiv.textContent = `–í—ã –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—É ${card.rank}${card.suit} –∏–∑ –∫–æ–ª–æ–¥—ã.`;
});

// –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
startBtn.addEventListener('click', () => {
  startGame();
});
