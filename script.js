// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
const playerHandDiv = document.getElementById('player-hand');
const botHandDiv = document.getElementById('bot-hand');
const battlefieldDiv = document.getElementById('battlefield');
const deckDiv = document.getElementById('deck');
const trumpCardDiv = document.getElementById('trump-card');
const gameLogDiv = document.getElementById('game-log');
const startBtn = document.getElementById('start-game-btn');

const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
const ranks = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];

// –°—Ç–∞—Ä—à–∏–Ω—Å—Ç–≤–æ —Ä–∞–Ω–≥–æ–≤ –ø–æ –∏–Ω–¥–µ–∫—Å—É
function rankValue(rank) {
  return ranks.indexOf(rank);
}

let deck = [];
let playerHand = [];
let botHand = [];
let trumpCard = null;
let trumpSuit = null;

let attackingCards = []; // –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ { card, defendedCard }
let defendingCards = [];

let playerTurn = false; // –∫—Ç–æ –∞—Ç–∞–∫—É–µ—Ç
let gameStarted = false;

// –°–æ–∑–¥–∞—ë–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
function createDeck() {
  const newDeck = [];
  for (const suit of suits) {
    for (const rank of ranks) {
      newDeck.push({ suit, rank });
    }
  }
  return newDeck;
}

function shuffle(deck) {
  for(let i = deck.length -1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i+1));
    [deck[i], deck[j]] = [deck[j], deck[i]];
  }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –≤ DOM
function createCardElement(card, faceUp = true) {
  const div = document.createElement('div');
  div.classList.add('card');
  if(!faceUp) {
    div.classList.add('back');
    div.textContent = 'üÇ†';
  } else {
    div.textContent = card.rank + card.suit;
    if(card.suit === '‚ô•' || card.suit === '‚ô¶') {
      div.classList.add('red');
    }
  }
  return div;
}

// –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–æ–¥—ã –∏ –∫–æ–∑—ã—Ä—è
function renderDeckAndTrump() {
  if(deck.length > 0) {
    deckDiv.style.display = 'block';
    deckDiv.textContent = `üÇ†\n(${deck.length})`;
  } else {
    deckDiv.style.display = 'none';
  }

  if(trumpCard) {
    trumpCardDiv.style.display = 'block';
    trumpCardDiv.textContent = trumpCard.rank + trumpCard.suit;
    if(trumpCard.suit === '‚ô•' || trumpCard.suit === '‚ô¶') {
      trumpCardDiv.classList.add('red');
    } else {
      trumpCardDiv.classList.remove('red');
    }
  } else {
    trumpCardDiv.style.display = 'none';
  }
}

// –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
function renderHands() {
  playerHandDiv.innerHTML = '';
  botHandDiv.innerHTML = '';

  // –ò–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∫–ª–∏–∫–∞—Ç—å –ø–æ –∫–∞—Ä—Ç–µ —á—Ç–æ–±—ã –∞—Ç–∞–∫–æ–≤–∞—Ç—å/–æ—Ç–±–∏–≤–∞—Ç—å
  playerHand.forEach((card, idx) => {
    const cardEl = createCardElement(card, true);
    cardEl.onclick = () => onPlayerCardClick(idx);
    playerHandDiv.appendChild(cardEl);
  });

  // –ë–æ—Ç ‚Äî –∫–∞—Ä—Ç—ã —Ä—É–±–∞—à–∫–æ–π –≤–≤–µ—Ä—Ö
  botHand.forEach(card => {
    const cardEl = createCardElement(card, false);
    botHandDiv.appendChild(cardEl);
  });
}

// –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –Ω–∞ –ø–æ–ª–µ –±–æ—è (–ø–∞—Ä—ã –∞—Ç–∞–∫—É—é—â–µ–π –∏ –æ—Ç–±–∏–≤–∞—é—â–µ–π)
function renderBattlefield() {
  battlefieldDiv.innerHTML = '';
  attackingCards.forEach(({card, defendedCard}, index) => {
    // –ö–∞—Ä—Ç–∞ –∞—Ç–∞–∫—É—é—â–µ–≥–æ
    const atkDiv = document.createElement('div');
    atkDiv.classList.add('battle-card');
    atkDiv.textContent = card.rank + card.suit;
    if(card.suit === '‚ô•' || card.suit === '‚ô¶') atkDiv.classList.add('red');
    atkDiv.style.position = 'relative';
    atkDiv.style.zIndex = 10;
    battlefieldDiv.appendChild(atkDiv);

    // –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç–Ω–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if(defendedCard) {
      const defDiv = document.createElement('div');
      defDiv.classList.add('battle-card', 'defense');
      defDiv.textContent = defendedCard.rank + defendedCard.suit;
      if(defendedCard.suit === '‚ô•' || defendedCard.suit === '‚ô¶') defDiv.classList.add('red');
      defDiv.style.position = 'absolute';
      defDiv.style.top = '40px';
      defDiv.style.left = `${index * 60}px`;
      battlefieldDiv.appendChild(defDiv);
    }
  });
}

// –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ —Å –º–ª–∞–¥—à–∏–º –∫–æ–∑—ã—Ä—ë–º ‚Äî –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–≤—ã–º
function findFirstAttacker() {
  let minTrumpPlayer = null;
  let minTrumpCard = null;

  function checkHand(hand, playerName) {
    for(const card of hand) {
      if(card.suit === trumpSuit) {
        if(!minTrumpCard || rankValue(card.rank) < rankValue(minTrumpCard.rank)) {
          minTrumpCard = card;
          minTrumpPlayer = playerName;
        }
      }
    }
  }

  checkHand(playerHand, 'player');
  checkHand(botHand, 'bot');

  return minTrumpPlayer;
}

// –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
async function startGame() {
  gameLogDiv.textContent = '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!';
  deck = createDeck();
  shuffle(deck);

  trumpCard = deck[deck.length - 1];
  trumpSuit = trumpCard.suit;

  playerHand = [];
  botHand = [];
  attackingCards = [];
  defendingCards = [];

  // –†–∞–∑–¥–∞–µ–º –ø–æ 6 –∫–∞—Ä—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
  await dealInitialCards();

  renderDeckAndTrump();
  renderHands();
  renderBattlefield();

  playerTurn = findFirstAttacker() === 'player';

  gameLogDiv.textContent = playerTurn ? '–í—ã —Ö–æ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–º.' : '–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç –±–æ—Ç. –û–∂–∏–¥–∞–π—Ç–µ...';

  if(!playerTurn) {
    await botAttack();
  }
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–¥–∞—á–∏ 6 –∫–∞—Ä—Ç –∫–∞–∂–¥–æ–º—É –ø–æ –æ—á–µ—Ä–µ–¥–∏
async function dealInitialCards() {
  for(let i=0; i < 6; i++) {
    await dealCardTo(playerHandDiv, playerHand, true);
    await dealCardTo(botHandDiv, botHand, false);
  }
}

async function dealCardTo(handDiv, hand, faceUp) {
  if(deck.length === 0) return;

  // –ë–µ—Ä—ë–º –∫–∞—Ä—Ç—É —Å–≤–µ—Ä—Ö—É
  const card = deck.pop();
  hand.push(card);

  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã –≤–æ–∑–ª–µ –∫–æ–ª–æ–¥—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const tempCard = createCardElement(card, false);
  tempCard.classList.add('move-card');
  document.body.appendChild(tempCard);

  // –ü–æ–∑–∏—Ü–∏—è –∫–æ–ª–æ–¥—ã
  const deckRect = deckDiv.getBoundingClientRect();
  tempCard.style.top = `${deckRect.top}px`;
  tempCard.style.left = `${deckRect.left}px`;

  await new Promise(r => setTimeout(r, 200));

  // –ü–æ–∑–∏—Ü–∏—è –∫—É–¥–∞ –∏–¥—Ç–∏ (–≤ —Ä—É–∫—É –∏–≥—Ä–æ–∫–∞/–±–æ—Ç–∞)
  const handRect = handDiv.getBoundingClientRect();

  // –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –Ω–∞ —Ä—É–∫—É ‚Äî –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã
  const cardCount = hand.length - 1;
  const offsetX = cardCount * 20; // —Å–¥–≤–∏–≥ –∫–∞—Ä—Ç

  // –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  tempCard.style.top = `${handRect.top}px`;
  tempCard.style.left = `${handRect.left + offsetX}px`;

  await new Promise(r => setTimeout(r, 400));

  document.body.removeChild(tempCard);

  // –û–±–Ω–æ–≤–∏—Ç—å —Ä—É–∫–∏ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
  renderHands();
  renderDeckAndTrump();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ –∏–≥—Ä–æ–∫–∞
function onPlayerCardClick(cardIdx) {
  if(!playerTurn) return;

  // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç, –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª, –µ—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ
  const card = playerHand[cardIdx];

  if(canPlayerAttackWithCard(card)) {
    attackingCards.push({card, defendedCard: null});
    playerHand.splice(cardIdx, 1);
    renderHands();
    renderBattlefield();

    gameLogDiv.textContent = '–í—ã –ø–æ–ª–æ–∂–∏–ª–∏ –∫–∞—Ä—Ç—É. –•–æ–¥–∏—Ç –±–æ—Ç...';
    playerTurn = false;

    setTimeout(botDefend, 1000);
  } else {
    gameLogDiv.textContent = '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É —Å–µ–π—á–∞—Å.';
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –º–æ–∂–Ω–æ –ª–∏ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π (–ø–µ—Ä–≤—ã–π —Ö–æ–¥ –∏–ª–∏ –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏–µ)
function canPlayerAttackWithCard(card) {
  if(attackingCards.length === 0) {
    return true; // –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –ª—é–±–æ–π —Ä–∞–Ω–≥–∞
  } else {
    // –ú–æ–∂–Ω–æ –∫–ª–∞—Å—Ç—å –∫–∞—Ä—Ç—ã, —Ä–∞–Ω–≥–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∫–∞—Ä—Ç–∞–º–∏ –Ω–∞ —Å—Ç–æ–ª–µ (–∞—Ç–∞–∫—É—é—â–∏–µ –∏–ª–∏ –æ—Ç–±–∏–≤–∞—é—â–∏–µ)
    const ranksOnTable = attackingCards.flatMap(({card, defendedCard}) => [card.rank, defendedCard ? defendedCard.rank : null])
      .filter(r => r !== null);

    return ranksOnTable.includes(card.rank);
  }
}

// –•–æ–¥ –±–æ—Ç–∞ (–∞—Ç–∞–∫–∞)
async function botAttack() {
  // –õ–æ–≥–∏–∫–∞ –∞—Ç–∞–∫–∏ ‚Äî –±–æ—Ç –∫–ª–∞–¥—ë—Ç —Å–∞–º—É—é –º–ª–∞–¥—à—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Ä–∞–Ω–≥—É
  // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±–æ—Ç –∫–ª–∞–¥–µ—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç—É

  const card = chooseBotAttackCard();
  if(!card) {
    gameLogDiv.textContent = '–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å, —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤–∞–º.';
    playerTurn = true;
    return;
  }

  attackingCards.push({card, defendedCard: null});
  removeCardFromHand(botHand, card);

  renderHands();
  renderBattlefield();

  gameLogDiv.textContent = '–ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç. –í–∞—à —Ö–æ–¥ ‚Äî –æ—Ç–±–∏–≤–∞–π—Ç–µ—Å—å.';
  playerTurn = true;
}

// –í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –∞—Ç–∞–∫–∏ –±–æ—Ç–æ–º
function chooseBotAttackCard() {
  if(attackingCards.length === 0) {
    // –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ —Ä–∞–Ω–≥—É
    return botHand.reduce((minCard, c) => {
      if(!minCard) return c;
      return rankValue(c.rank) < rankValue(minCard.rank) ? c : minCard;
    }, null);
  } else {
    // –ú–æ–∂–Ω–æ –ø–æ–¥–∫–∏–Ω—É—Ç—å –∫–∞—Ä—Ç—É –ø–æ —Ä–∞–Ω–≥—É –Ω–∞ —Å—Ç–æ–ª–µ
    const ranksOnTable = attackingCards.flatMap(({card, defendedCard}) => [card.rank, defendedCard ? defendedCard.rank : null])
      .filter(r => r !== null);

    for(const c of botHand) {
      if(ranksOnTable.includes(c.rank)) {
        return c;
      }
    }
  }
  return null;
}

// –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ (–ø–æ –æ–±—ä–µ–∫—Ç—É)
function removeCardFromHand(hand, card) {
  const idx = hand.findIndex(c => c.rank === card.rank && c.suit === card.suit);
  if(idx >= 0) hand.splice(idx, 1);
}

// –ó–∞—â–∏—Ç–∞ –±–æ—Ç–∞ (–æ—Ç–±–∏–≤–∞–Ω–∏–µ)
function botDefend() {
  // –ë–æ—Ç –æ—Ç–±–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
  for(let i=0; i < attackingCards.length; i++) {
    const attackCard = attackingCards[i].card;
    if(attackingCards[i].defendedCard) continue;

    // –ò—â–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –æ—Ç–±–∏–≤–∞–Ω–∏—è
    const defenseCard = botFindDefenseCard(attackCard);
    if(!defenseCard) {
      // –ù–µ –º–æ–∂–µ—Ç –æ—Ç–±–∏—Ç—å—Å—è, –∑–∞–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã
      botTakesCards();
      return;
    }
    // –û—Ç–±–∏–≤–∞–µ—Ç—Å—è
    attackingCards[i].defendedCard = defenseCard;
    removeCardFromHand(botHand, defenseCard);
  }

  renderHands();
  renderBattlefield();

  gameLogDiv.textContent = '–ë–æ—Ç –æ—Ç–±–∏–ª—Å—è. –í–∞—à —Ö–æ–¥ ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥–∫–∏–Ω—É—Ç—å –∫–∞—Ä—Ç—ã –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ö–æ–¥.';
  playerTurn = true;
}

// –ü–æ–∏—Å–∫ —É –±–æ—Ç–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–±–∏–≤–∞–Ω–∏—è
function botFindDefenseCard(attackCard) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –±–æ—Ç–∞
  for(const c of botHand) {
    if(canBeatCard(attackCard, c)) {
      return c;
    }
  }
  return null;
}

// –õ–æ–≥–∏–∫–∞ –æ—Ç–±–∏–≤–∞–Ω–∏—è: –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–±–∏—Ç—å –∞—Ç–∞–∫—É –∑–∞—â–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ–π
function canBeatCard(attackCard, defenseCard) {
  if(defenseCard.suit === attackCard.suit) {
    return rankValue(defenseCard.rank) > rankValue(attackCard.rank);
  }
  if(defenseCard.suit === trumpSuit && attackCard.suit !== trumpSuit) {
    return true;
  }
  return false;
}

// –ë–æ—Ç –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞
function botTakesCards() {
  gameLogDiv.textContent = '–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–±–∏—Ç—å—Å—è –∏ –∑–∞–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã.';
  attackingCards.forEach(({card, defendedCard}) => {
    botHand.push(card);
    if(defendedCard) botHand.push(defendedCard);
  });
  attackingCards = [];
  defendingCards = [];
  playerTurn = true;

  // –ü–æ—Å–ª–µ –∑–∞–±–æ—Ä–∞ ‚Äî –¥–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã
  refillHandsAfterTurn();
  renderHands();
  renderBattlefield();
}

// –î–æ–±–æ—Ä –∫–∞—Ä—Ç –∏–∑ –∫–æ–ª–æ–¥—ã, —á—Ç–æ–±—ã —É –∫–∞–∂–¥–æ–≥–æ –±—ã–ª–æ –ø–æ 6
function refillHandsAfterTurn() {
  while(playerHand.length < 6 && deck.length > 0) {
    playerHand.push(deck.pop());
  }
  while(botHand.length < 6 && deck.length > 0) {
    botHand.push(deck.pop());
  }
  renderHands();
  renderDeckAndTrump();
}

// –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç
startBtn.onclick = () => {
  if(!gameStarted) {
    gameStarted = true;
    startBtn.disabled = true;
    startGame();
  }
};
